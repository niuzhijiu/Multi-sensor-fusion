// Generated by gencpp from file sensor_time_align/FusedState.msg
// DO NOT EDIT!


#ifndef SENSOR_TIME_ALIGN_MESSAGE_FUSEDSTATE_H
#define SENSOR_TIME_ALIGN_MESSAGE_FUSEDSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace sensor_time_align
{
template <class ContainerAllocator>
struct FusedState_
{
  typedef FusedState_<ContainerAllocator> Type;

  FusedState_()
    : timestamp()
    , image_filename()
    , image()
    , angular_velocity()
    , linear_acceleration()
    , imu_timestamp()  {
    }
  FusedState_(const ContainerAllocator& _alloc)
    : timestamp()
    , image_filename(_alloc)
    , image(_alloc)
    , angular_velocity(_alloc)
    , linear_acceleration(_alloc)
    , imu_timestamp(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _image_filename_type;
  _image_filename_type image_filename;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _imu_timestamp_type;
  _imu_timestamp_type imu_timestamp;





  typedef boost::shared_ptr< ::sensor_time_align::FusedState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_time_align::FusedState_<ContainerAllocator> const> ConstPtr;

}; // struct FusedState_

typedef ::sensor_time_align::FusedState_<std::allocator<void> > FusedState;

typedef boost::shared_ptr< ::sensor_time_align::FusedState > FusedStatePtr;
typedef boost::shared_ptr< ::sensor_time_align::FusedState const> FusedStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_time_align::FusedState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_time_align::FusedState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_time_align::FusedState_<ContainerAllocator1> & lhs, const ::sensor_time_align::FusedState_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.image_filename == rhs.image_filename &&
    lhs.image == rhs.image &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.imu_timestamp == rhs.imu_timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_time_align::FusedState_<ContainerAllocator1> & lhs, const ::sensor_time_align::FusedState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_time_align

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_time_align::FusedState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_time_align::FusedState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_time_align::FusedState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_time_align::FusedState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_time_align::FusedState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_time_align::FusedState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_time_align::FusedState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc3086d10a35c265a9ccaae0f89428d8";
  }

  static const char* value(const ::sensor_time_align::FusedState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc3086d10a35c265ULL;
  static const uint64_t static_value2 = 0xa9ccaae0f89428d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_time_align::FusedState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_time_align/FusedState";
  }

  static const char* value(const ::sensor_time_align::FusedState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_time_align::FusedState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#对齐后的时间戳\n"
"time timestamp\n"
"#相机信息\n"
"string image_filename                           #相机图片文件名\n"
"sensor_msgs/Image image                         #图像数据\n"
"#IMU 信息\n"
"geometry_msgs/Vector3[] angular_velocity        # 存储多个 IMU 的角速度数据\n"
"geometry_msgs/Vector3[] linear_acceleration     # 存储多个 IMU 的加速度数据\n"
"# IMU 时间戳（每条 IMU 数据的时间戳）\n"
"float64[] imu_timestamp  # 存储多个 IMU 数据的时间戳\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sensor_time_align::FusedState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_time_align::FusedState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.image_filename);
      stream.next(m.image);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.imu_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusedState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_time_align::FusedState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_time_align::FusedState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "image_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.image_filename);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "image: ";
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angular_velocity: ";
    if (v.angular_velocity.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.angular_velocity[i]);
    }
    if (v.angular_velocity.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_acceleration: ";
    if (v.linear_acceleration.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.linear_acceleration[i]);
    }
    if (v.linear_acceleration.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "imu_timestamp: ";
    if (v.imu_timestamp.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.imu_timestamp.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.imu_timestamp[i]);
    }
    if (v.imu_timestamp.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_TIME_ALIGN_MESSAGE_FUSEDSTATE_H
